#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# common atboot code
<%= @puppet_atboot_common %>

# Wait for the DNS service to start.  This *should* happen even if there's no network
# (we're waiting for launchd to run lookupd), but in case it doesn't we'll reboot after
# 600s of this.
wait_for_dns() {
    count=0
    while scutil --dns | grep 'No DNS configuration available'; do
        echo "..waiting for DNS"
        sleep 1

        count=$((count+1))
        if [ $count -gt 600 ]; then
            do_reboot
        fi
    done

    # And even then, sometimes DNS doesn't work yet!  We try looking up the puppet
    # masters, and if one succeeds, we call it good
    count=0
    while true; do
        for pm in $PUPPETMASTERS; do
            host $pm && return
        done

        echo "..apparently DNS is still down"
        sleep 1

        count=$((count+1))
        if [ $count -gt 600 ]; then
            do_reboot
        fi
    done
}

# The buildbot plist, if it's running on this host, will only try to start when
# SEMAPHORE exists.  This file must be in a directory where the builder user can
# delete it, but it shouldn't exist yet
SEMAPHORE_DIR="/var/tmp/semaphore"
SEMAPHORE="${SEMAPHORE_DIR}/run-buildbot"
mkdir -p "${SEMAPHORE_DIR}"
chmod 0777 "${SEMAPHORE_DIR}"
rm -rf "${SEMAPHORE}"

function puppet_config_version_is_not_latest() {
    readonly local last_run_summary_yml=/var/lib/puppet/state/last_run_summary.yaml
    local last_run=$(sed -n -e 's/^[ \n\t]*config:[ \n\t]*"\([^+"]*\)+*"/\1/p' "${last_run_summary_yml}")
    # if git fails or is not yet installed, this will leave a non-matching empty string
    # FIXME: since the move to github, last_run is always "remotes/origin/HEAD" because of the way
    # we checkout the manifests on the masters, so this check is not doing anything
    #local repo_version=$(git ls-remote -h https://github.com/mozilla-releng/build-puppet | grep master | awk '{print $1}')
    local repo_version="remotes/origin/HEAD"
    echo "Last puppet run (config version): ${last_run} [Repository tip hash: ${repo_version}]"
    [[ -z "${repo_version}" ]] && return 1
    [[ "${last_run}" != "${repo_version}" ]]
}

function puppet_elapsed_time_exceeded() {
    local max_seconds=<%= scope['::config::puppet_run_atboot_if_more_than_seconds'] %>

    # if max_seconds is an empty string, undefined, or 0, then return true
    [[ $max_seconds -lt 1 || ! -e $LAST_GOOD_RUN_FILE ]] && return 0

    # using perl because the common puppet_atboot functions do
    local since_last_good_run=$(perl -e '@st = stat("'${LAST_GOOD_RUN_FILE}'"); print time - $st[9]')
    echo "Last puppet run (seconds ago): ${since_last_good_run} [max ${max_seconds}]"
    [[ $since_last_good_run -gt $max_seconds ]]
}

REBOOT_COUNT_FILE="${LAST_GOOD_RUN_FILE}.atboot_run_puppet_counter"
date >> $REBOOT_COUNT_FILE  # increment boot count for every atboot
function puppet_reboot_counter_exceeded() {
    local max_count=<%= scope['::config::puppet_run_atboot_if_more_than_n_reboots'] %>

    # if max_count is an empty string, undefined, or 0, then return true
    [[ $max_count -lt 1 ]] && return 0

    local -i run_count=$(wc -l <"${REBOOT_COUNT_FILE}")
    echo "Last puppet run (reboots since): ${run_count} [max ${max_count}]"
    [[ $run_count -gt $max_count ]]
    # if true, reset reboot count when puppet is run (below)
    # > $REBOOT_COUNT_FILE
}

wait_for_dns

# First condition is puppet_run_atboot_always flag set in puppet::atboot
if <%= @puppet_run_atboot_always %> \
   || [ -f $REBOOT_FLAG_FILE ] \
   || cause=$(puppet_reboot_counter_exceeded) \
   || cause=$(puppet_elapsed_time_exceeded) \
   || cause=$(puppet_config_version_is_not_latest); then
    logger -ist run-puppet "Starting run-puppet.sh at $(date). ${cause}"
    > $REBOOT_COUNT_FILE  # reset reboot count
    run_until_success
else
    logger -ist run-puppet "Skipping puppet run. ${cause}"  # cause will contain config version
    <%= @execs_every_boot_without_puppet %>
fi

# Now touch SEMAPHORE to signal the builder user's launchd to start
# buildbot.  This is level-triggered, not edge-triggered, so it's OK if the
# touch below happens before the builder user is logged in.
touch "${SEMAPHORE}"
